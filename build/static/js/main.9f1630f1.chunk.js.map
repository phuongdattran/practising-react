{"version":3,"sources":["components/letterBtn.jsx","components/keyboard.jsx","components/letter.jsx","components/word.jsx","components/resetBtn.jsx","App.js","reportWebVitals.js","index.js"],"names":["LetterBtn","this","props","letter","onGuess","className","value","onClick","disabled","getDisabled","guessed","Component","Keyboard","alphabet","id","map","Letter","displayLetter","found","Word","word","resetBtn","onReset","arrayObjectAlphabet","toUpperCase","split","sort","arrayObjectWord","Date","now","Math","random","App","state","nbrOfLettersToGuess","length","hp","handleGuess","index","indexOf","letterWord","forEach","filter","letterInWord","setState","handleReset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f1630f1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass LetterBtn extends Component {\r\n    render() { \r\n        const {letter, onGuess} = this.props;\r\n        return ( \r\n                <button className=\"letter\" value={letter.value} onClick={()=>onGuess(letter)} disabled={this.getDisabled()}>{letter.value}</button>\r\n        );\r\n    }\r\n\r\n    getDisabled() {\r\n        return this.props.letter.guessed;\r\n    }\r\n}\r\n\r\nexport default LetterBtn;","import React, { Component } from 'react';\r\nimport LetterBtn from './letterBtn';\r\n\r\nclass Keyboard extends Component {\r\n    render() { \r\n        const {alphabet, onGuess} = this.props\r\n        \r\n        return ( \r\n            <div id=\"keyboard\">\r\n                {alphabet.map(letter => (\r\n                    <LetterBtn key={letter.id} letter={letter} onGuess={onGuess}/>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Keyboard;","import React, { Component } from 'react';\r\n\r\nclass Letter extends Component {\r\n    render() { \r\n        return ( \r\n                <span className=\"wordLetter\">{this.displayLetter()}</span>\r\n        );\r\n    }\r\n    displayLetter() {\r\n        const {found, value} = this.props.letter\r\n        return found ? value : \"_\";\r\n    }\r\n}\r\n\r\nexport default Letter;","import React, { Component } from 'react';\r\nimport Letter from './letter';\r\n\r\nclass Word extends Component {\r\n    render() { \r\n        return ( \r\n            <div id=\"word\">\r\n            {this.props.word.map(letter => <Letter key={letter.id} letter={letter} />)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Word;","import React, { Component } from 'react';\r\n\r\nclass resetBtn extends Component {\r\n    render() { \r\n        return ( \r\n            <div id=\"btnContainer\">\r\n                <button id=\"resetBtn\" onClick={this.props.onReset}>Reset</button>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default resetBtn;","import './App.css';\nimport React, { Component } from 'react';\nimport Keyboard from './components/keyboard';\nimport Word from './components/word';\nimport ResetBtn from './components/resetBtn';\n\nlet alphabet = 'azertyuiopqsdfghjklmwxcvbn'.toUpperCase().split('').sort();\nlet arrayObjectAlphabet = alphabet.map(letter => {return ({id: letter, value: letter, guessed:false})})\n\nlet word = 'banane'.toUpperCase().split('');\nlet arrayObjectWord = word.map(letter => {return ({id: Date.now()+Math.random() * 10000, value: letter, found:false})});\n\nlet hp = 6;\n\nclass App extends Component {\n  state = {\n    alphabet: arrayObjectAlphabet,\n    word: arrayObjectWord,\n    nbrOfLettersToGuess: arrayObjectWord.length,\n    hp\n  }\n\n  handleGuess = (letter) => {\n    let alphabet = [...this.state.alphabet];\n    let index = alphabet.indexOf(letter)\n    alphabet[index] = {...letter};\n    alphabet[index].guessed = true;\n\n    let word = [...this.state.word];\n    word = word.map(letterWord => {return letterWord.value === letter.value ? {...letterWord, found: true} : letterWord});\n    \n    let nbrOfLettersToGuess = this.state.word.length;\n    word.forEach(letter => letter.found && nbrOfLettersToGuess--)\n\n    let hp = this.state.hp;\n    let nbrNotCorrespondingLetter = word.filter(letterInWord => letterInWord.value !== letter.value && letterInWord.value).length //=== arrayObjectWord.length ? hp-- : hp;\n    if (nbrNotCorrespondingLetter === arrayObjectWord.length) hp--;\n    \n    this.setState({ alphabet, word, nbrOfLettersToGuess, hp });\n  };\n\n  handleReset = () => {\n    this.setState({\n      alphabet: arrayObjectAlphabet,\n      word: arrayObjectWord,\n      nbrOfLettersToGuess: arrayObjectWord.length,\n      hp\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"hp\">Life: {this.state.hp}</div>\n        <Word word={this.state.word} />\n        {this.state.nbrOfLettersToGuess !== 0 && this.state.hp > 0 ?  <Keyboard alphabet={this.state.alphabet} onGuess={this.handleGuess} /> : <ResetBtn onReset={this.handleReset} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}